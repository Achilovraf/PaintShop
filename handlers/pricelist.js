const { Markup } = require("telegraf");
const path = require("path");
const fs = require("fs");
const { products } = require("../data/testData");
const { formatPrice } = require("../utils/helpers");

module.exports = (bot) => {
  bot.action("price_list", async (ctx) => {
    try {
      let message = `üìÑ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç: 10/${products.length}\n\n`;

      products.slice(0, 10).forEach((item, index) => {
        const bonusIcon = item.hasBonus ? "‚úÖ" : "‚ùå";
        message += `${index + 1}. ${item.name}. ${formatPrice(
          item.price
        )} —Å—É–º - –ë–æ–Ω—É—Å ${bonusIcon}\n`;
      });

      const keyboard = [
        [
          Markup.button.callback("‚¨ÖÔ∏è", "price_prev"),
          Markup.button.callback("üîô –ù–∞–∑–∞–¥", "main_menu"),
          Markup.button.callback("‚û°Ô∏è", "price_next"),
        ],
      ];

      keyboard.push([
        Markup.button.callback(
          "üì• –ü—Ä–∞–π—Å-–ª–∏—Å—Ç.xlsx - –ó–∞–≥—Ä—É–∑–∏—Ç—å",
          "download_excel"
        ),
      ]);

      return ctx.editMessageText(message, Markup.inlineKeyboard(keyboard));
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞:", err);
      return ctx.editMessageText(
        "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞",
        Markup.inlineKeyboard([
          [Markup.button.callback("üîô –ù–∞–∑–∞–¥", "main_menu")],
        ])
      );
    }
  });

  // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞
  bot.action("download_excel", async (ctx) => {
    try {
      await ctx.answerCbQuery("üì• –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...");

      // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
      const filePath = path.join(__dirname, "../data/pricelist.xlsx");

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
      if (fs.existsSync(filePath)) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
        await ctx.replyWithDocument(
          { source: filePath },
          {
            caption: "üìÑ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç",
            reply_markup: Markup.inlineKeyboard([
              [Markup.button.callback("üîô –ö –ø—Ä–∞–π—Å-–ª–∏—Å—Ç—É", "price_list")],
            ]),
          }
        );
      } else {
        // –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–∞ –ª–µ—Ç—É
        const textContent = generatePriceListText();

        await ctx.replyWithDocument(
          {
            source: Buffer.from(textContent, "utf8"),
            filename: "pricelist.txt",
          },
          {
            caption: "üìÑ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç (—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)",
            reply_markup: Markup.inlineKeyboard([
              [Markup.button.callback("üîô –ö –ø—Ä–∞–π—Å-–ª–∏—Å—Ç—É", "price_list")],
            ]),
          }
        );
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:", err);
      await ctx.answerCbQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞");
    }
  });

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç—É
  bot.action("price_prev", (ctx) => {
    return ctx.answerCbQuery("‚¨ÖÔ∏è –≠—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞");
  });

  bot.action("price_next", (ctx) => {
    return ctx.answerCbQuery("‚û°Ô∏è –ü–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ —Ç–æ–≤–∞—Ä—ã");
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
function generatePriceListText() {
  let content = "–ü–†–ê–ô–°-–õ–ò–°–¢ –°–¢–†–û–ò–¢–ï–õ–¨–ù–´–• –ú–ê–¢–ï–†–ò–ê–õ–û–í\n";
  content += "=".repeat(50) + "\n\n";

  const { categories, products } = require("../data/testData");

  categories.forEach((category) => {
    const categoryProducts = products.filter(
      (p) => p.categoryId === category.id
    );

    if (categoryProducts.length > 0) {
      content += `${category.name}\n`;
      content += "-".repeat(category.name.length) + "\n";

      categoryProducts.forEach((product, index) => {
        const bonusText = product.hasBonus ? ` (–ë–æ–Ω—É—Å: ${product.bonus})` : "";
        content += `${index + 1}. ${
          product.name
        } - ${product.price.toLocaleString()} —Å—É–º${bonusText}\n`;
      });

      content += "\n";
    }
  });

  content += "\n–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: " + new Date().toLocaleString("ru-RU");
  content += "\n–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –∑–∞–∫–∞–∑–æ–≤: 93 007-07-06";

  return content;
}
