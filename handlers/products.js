// handlers/products.js
const { Markup } = require("telegraf");
const { categories, products, userStates, cart } = require("../data/testData");

module.exports = (bot) => {
  // üìå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
  bot.action("categories", (ctx) => {
    const keyboard = [];

    for (let i = 0; i < categories.length; i += 2) {
      const row = [];
      row.push(
        Markup.button.callback(
          categories[i].name,
          `category_${categories[i].id}`
        )
      );
      if (categories[i + 1]) {
        row.push(
          Markup.button.callback(
            categories[i + 1].name,
            `category_${categories[i + 1].id}`
          )
        );
      }
      keyboard.push(row);
    }

    keyboard.push([Markup.button.callback("üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", "cart")]);
    keyboard.push([Markup.button.callback("üîô –ù–∞–∑–∞–¥", "main_menu")]);

    return ctx.editMessageText(
      "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
      Markup.inlineKeyboard(keyboard)
    );
  });

  // üìå –í—ã–≤–æ–¥ —Ç–æ–≤–∞—Ä–æ–≤ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  categories.forEach((cat) => {
    bot.action(`category_${cat.id}`, (ctx) => {
      const items = products.filter((p) => p.categoryId === cat.id);

      if (items.length === 0) {
        return ctx.editMessageText(
          `–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${cat.name}" –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.`,
          Markup.inlineKeyboard([
            [Markup.button.callback("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", "categories")],
            [Markup.button.callback("üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", "cart")],
          ])
        );
      }

      const keyboard = [];
      for (let i = 0; i < items.length; i += 2) {
        const row = [];
        row.push(
          Markup.button.callback(items[i].name, `product_${items[i].id}`)
        );
        if (items[i + 1]) {
          row.push(
            Markup.button.callback(
              items[i + 1].name,
              `product_${items[i + 1].id}`
            )
          );
        }
        keyboard.push(row);
      }
      keyboard.push([Markup.button.callback("üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", "cart")]);

      return ctx.editMessageText(`–¢–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: *${cat.name}*`, {
        parse_mode: "Markdown",
        ...Markup.inlineKeyboard(keyboard),
      });
    });
  });

  // üìå –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–∞
  bot.action(/product_(\d+)/, (ctx) => {
    const productId = parseInt(ctx.match[1]);
    const product = products.find((p) => p.id === productId);

    if (!product) return ctx.answerCbQuery("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω");

    const userId = ctx.from.id;
    if (!userStates.has(userId)) {
      userStates.set(userId, {});
    }
    userStates.get(userId)[productId] = { quantity: "" };

    return renderProduct(ctx, productId);
  });

  // üìå –ù–∞–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–∫–∞–∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä)
  bot.action(/qty_(\d+)_(\d+)/, async (ctx) => {
    const productId = parseInt(ctx.match[1]);
    const digit = ctx.match[2]; // —Ü–∏—Ñ—Ä–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
    const userId = ctx.from.id;

    if (!userStates.has(userId) || !userStates.get(userId)[productId]) {
      userStates.set(userId, { [productId]: { quantity: "" } });
    }

    let current = userStates.get(userId)[productId].quantity || "";
    userStates.get(userId)[productId].quantity = current + digit;

    await ctx.answerCbQuery(
      `–í—ã–±—Ä–∞–Ω–æ: ${userStates.get(userId)[productId].quantity}`
    );

    return renderProduct(ctx, productId);
  });

  // üìå –û—á–∏—Å—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
  bot.action(/remove_(\d+)/, async (ctx) => {
    const productId = parseInt(ctx.match[1]);
    const userId = ctx.from.id;

    if (userStates.has(userId) && userStates.get(userId)[productId]) {
      userStates.get(userId)[productId].quantity = "";
    }

    await ctx.answerCbQuery("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–±—Ä–æ—à–µ–Ω–æ");
    return renderProduct(ctx, productId);
  });

  // üìå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
  bot.action(/add_to_cart_(\d+)/, (ctx) => {
    const productId = parseInt(ctx.match[1]);
    const userId = ctx.from.id;

    const userState = userStates.get(userId);
    if (!userState || !userState[productId] || !userState[productId].quantity) {
      return ctx.answerCbQuery("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å—à–µ 0");
    }

    const quantity = parseInt(userState[productId].quantity, 10);
    const product = products.find((p) => p.id === productId);

    if (!cart.has(userId)) {
      cart.set(userId, []);
    }

    const userCart = cart.get(userId);
    const existingItem = userCart.find((item) => item.productId === productId);

    if (existingItem) {
      existingItem.quantity += quantity;
    } else {
      userCart.push({
        productId,
        productName: product.name,
        price: product.price,
        quantity,
        bonus: product.bonus,
      });
    }

    ctx.answerCbQuery(`–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É: ${quantity} —à—Ç.`);
    delete userState[productId];

    return ctx.editMessageText(
      "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!",
      Markup.inlineKeyboard([
        [Markup.button.callback("üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", "cart")],
        [Markup.button.callback("üìÅ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", "categories")],
        [Markup.button.callback("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")],
      ])
    );
  });

  // –ü—É—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞ "–í—ã–±—Ä–∞–Ω–æ"
  bot.action("quantity_display", (ctx) => ctx.answerCbQuery(""));
};

// üìå –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
function renderProduct(ctx, productId) {
  const product = products.find((p) => p.id === productId);
  const userId = ctx.from.id;
  const quantity = userStates.get(userId)[productId]?.quantity || "" || "0";

  const bonusInfo = product.hasBonus
    ? `‚≠ê –≠—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç –∏–º–µ–µ—Ç –±–æ–Ω—É—Å:\n–ß–µ–º –±–æ–ª—å—à–µ –ø–æ–∫—É–ø–∞–µ—Ç–µ, —Ç–µ–º –±–æ–ª—å—à–µ –±–æ–Ω—É—Å.\n‚≠ê Bonus: ${product.bonus}`
    : "‚≠ê Bonus: 0";

  const message = `üì¶ –ò–º—è: ${product.name}\nüí≤ –¶–µ–Ω–∞: ${product.price} —Å—É–º\n\n${bonusInfo}`;

  const keyboard = [
    [Markup.button.callback(`–í—ã–±—Ä–∞–Ω–æ: ${quantity}`, "quantity_display")],
    [
      Markup.button.callback("1", `qty_${productId}_1`),
      Markup.button.callback("2", `qty_${productId}_2`),
      Markup.button.callback("3", `qty_${productId}_3`),
    ],
    [
      Markup.button.callback("4", `qty_${productId}_4`),
      Markup.button.callback("5", `qty_${productId}_5`),
      Markup.button.callback("6", `qty_${productId}_6`),
    ],
    [
      Markup.button.callback("7", `qty_${productId}_7`),
      Markup.button.callback("8", `qty_${productId}_8`),
      Markup.button.callback("9", `qty_${productId}_9`),
    ],
    [
      Markup.button.callback("0", `qty_${productId}_0`),
      Markup.button.callback("‚ùå –£–¥–∞–ª–∏—Ç—å", `remove_${productId}`),
    ],
    [
      Markup.button.callback(
        "üì¶ –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
        `add_to_cart_${productId}`
      ),
    ],
    [Markup.button.callback("üîô –ù–∞–∑–∞–¥", `category_${product.categoryId}`)],
  ];

  return ctx.editMessageText(message, Markup.inlineKeyboard(keyboard));
}
