const { Markup } = require("telegraf");
const { orders } = require("../data/testData");
const { formatPrice } = require("../utils/helpers");

module.exports = (bot) => {
  bot.action("my_orders", (ctx) => {
    const userId = ctx.from?.id;
    if (!userId) return;

    const userOrders = orders.get(userId) || [];

    if (userOrders.length === 0) {
      return ctx.editMessageText(
        "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤",
        Markup.inlineKeyboard([
          [Markup.button.callback("üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", "categories")],
          [Markup.button.callback("üîô –ù–∞–∑–∞–¥", "main_menu")],
        ])
      );
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑
    const order = userOrders[userOrders.length - 1];

    const statusNames = {
      pending: "–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏",
      delivered: "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ",
      cancelled: "–û—Ç–º–µ–Ω–µ–Ω",
      processing: "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
    };

    const message =
      `üìã –ó–∞–∫–∞–∑ #${order.id}\n\n` +
      `üìä –¢–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ: ${order.items.length}\n` +
      `üí∞ –û–±—â–∞—è —Å—É–º–º–∞: ${formatPrice(order.totalPrice)} —Å—É–º\n` +
      `‚≠ê –ë–æ–Ω—É—Å: ${formatPrice(order.bonusAmount)} —Å—É–º\n\n` +
      `üì¶ –°—Ç–∞—Ç—É—Å: ${statusNames[order.status] || order.status}\n` +
      `üóìÔ∏è –°–æ–∑–¥–∞–Ω: ${order.createdAt}\n` +
      `üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: ${order.updatedAt}`;

    const keyboard = [
      [Markup.button.callback("üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞", `order_details_${order.id}`)],
      [Markup.button.callback("üîô –ù–∞–∑–∞–¥", "main_menu")],
    ];

    return ctx.editMessageText(message, Markup.inlineKeyboard(keyboard));
  });

  // –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
  bot.action(/order_details_(\d+)/, (ctx) => {
    const orderId = parseInt(ctx.match[1]);
    const userId = ctx.from?.id;
    if (!userId) return;

    const userOrders = orders.get(userId) || [];
    const order = userOrders.find((o) => o.id === orderId);

    if (!order) {
      return ctx.answerCbQuery("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    let message = `üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #${order.id}\n\n`;

    order.items.forEach((item, index) => {
      const total = item.quantity * item.price;
      message += `${index + 1}. ${item.productName}\n`;
      message += `   ${item.quantity} √ó ${formatPrice(
        item.price
      )} = ${formatPrice(total)} —Å—É–º\n\n`;
    });

    message += `üí∞ –ò—Ç–æ–≥–æ: ${formatPrice(order.totalPrice)} —Å—É–º`;

    return ctx.editMessageText(
      message,
      Markup.inlineKeyboard([
        [Markup.button.callback("üîô –ö –∑–∞–∫–∞–∑–∞–º", "my_orders")],
      ])
    );
  });
};
